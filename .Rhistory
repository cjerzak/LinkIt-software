#covariates incorrectly specified?
plot(seq_CovariateIncorrectlySpecified/k, abs(biasVec),
xlab = "fraction of covariates incorrectly specified",
ylab = "Absolute Bias")
#Great! We're ready to plot our results
#Would you expect things to behave in a linear way or
#non-linear way with respect to the fraction of
#covariates incorrectly specified?
plot(seq_CovariateIncorrectlySpecified/k, abs(biasVec),
xlab = "fraction of covariates incorrectly specified",
ylab = "Absolute Bias")
plot(seq_CovariateIncorrectlySpecified/k, varVec,
xlab = "fraction of covariates incorrectly specified",
ylab = "Variance")
foreign::read.dta
foreign::read.dta("./Downloads/Vietnam-2015-full data.dta")
my_dta = foreign::read.dta("./Downloads/Vietnam-2015-full data.dta")
my_dta = foreign::read.dta("./Downloads/Vietnam-2015-full data.dta")
head(my_dta[,1:5])
my_dta[1,]
mean(rewards_allP0_vec,na.rm=T)
mean(rewards_allP1_vec,na.rm=T)
mean(rewards_naive,na.rm=T)
rm(list=ls())
library(fuzzyjoin);library(tidyverse)
factor2numeric <- function(x){as.numeric(as.character(x))}
#setwd("~/Dropbox/Directory")
library(data.table)
devtools::install_github("cjerzak/LinkIt-software/LinkIt");
library(LinkIt)
LinkIt(x=c(), y=c(),by.x = "NM_LGL",by.y="comnam",parallelize = T)
load("./LinkIt_directory.Rdata")
directory
data("LinkIt_directory_trigrams.Rdata", "LinkIt_directory_trigrams.Rdata", package="LinkIt", envir=parent.env(environment()))
Linkit::
LinkIt::directory
LinkIt:::directory
LinkIt::LinkIt
data("LinkIt_directory_trigrams", "LinkIt_directory_trigrams", package="LinkIt", envir=parent.env(environment()))
devtools::install_github("cjerzak/LinkIt-software/LinkIt");
q()
q()
rm(list=ls())
library(fuzzyjoin);library(tidyverse)
factor2numeric <- function(x){as.numeric(as.character(x))}
#setwd("~/Dropbox/Directory")
library(data.table)
library(LinkIt)
LinkIt(x=c(), y=c(),by.x = "NM_LGL",by.y="comnam",parallelize = T)
directory
LinkIt:::directory
data("LinkIt_directory.Rdata", envir=environment())
data("LinkIt_directory_trigrams.Rdata", envir=environment())
ls()
list.files()
data
?data
data(LinkIt_directory_trigrams.Rdata,package="LinkIt")
data("LinkIt_directory_trigrams.Rdata",package="LinkIt")
data(file="LinkIt_directory_trigrams.Rdata",package="LinkIt")
save(1, file = "TEMP.Rdata")
save(x, file = "TEMP.Rdata")
load("TEMP.Rdata")
load("TEMP")
data("TEMP")
data("TEMP.Rdata")
x
devtools::install_github("cjerzak/LinkIt-software/LinkIt");
q()
rm(list=ls())
library(fuzzyjoin);library(tidyverse)
factor2numeric <- function(x){as.numeric(as.character(x))}
#setwd("~/Dropbox/Directory")
library(data.table)
devtools::install_github("cjerzak/LinkIt-software/LinkIt");
library(LinkIt)
#LinkIt(x=c(), y=c(),by.x = "NM_LGL",by.y="comnam",parallelize = T)
options(stringsAsFactors = F)
LinkIt(x=c(), y=c(),by.x = "NM_LGL",by.y="comnam",parallelize = T)
data("LinkIt_directory.Rdata", package="LinkIt",envir=environment())
data(LinkIt_directory_trigrams, package="LinkIt", envir=environment())
data
data
data
directory
directory
data("LinkIt_directory_trigrams.Rdata", package="LinkIt", envir=environment())
q()
rm(list=ls())
library(fuzzyjoin);library(tidyverse)
factor2numeric <- function(x){as.numeric(as.character(x))}
library(data.table); library(sqldf);library(stringdist)
#setwd("~/Dropbox/Directory")
devtools::install_github("cjerzak/LinkIt-software/LinkIt");
library(LinkIt)
LinkIt(x=c(), y=c(),by.x = "NM_LGL",by.y="comnam",parallelize = T)
LinkedThem_directory
load("/Users/cjerzak/Dropbox/Directory/LinkIt-software/LinkIt/R/sysdata.Rda")
devtools::use_data(LinkedThem_directory,internal=T)
?devtools::use_data
LinkIt::LinkedThem_directory
data(LinkedThem_directory,package="LinkIt")
data(,package="LinkIt")
list.data
list.dirs(,package="LinkIt")
q(0)
q()
rm(list=ls())
library(fuzzyjoin);library(tidyverse)
factor2numeric <- function(x){as.numeric(as.character(x))}
library(data.table); library(sqldf);library(stringdist)
#setwd("~/Dropbox/Directory")
devtools::install_github("cjerzak/LinkIt-software/LinkIt");
library(LinkIt)
#load in data
load("./STARTUP_POINT.Rdata")
#let's sample the ones which definitely have matches
sample_ = sample(1:nrow(z_human),nrow(z_human))
sampled_rssd = z_human$rssd[sample_]
sampled_permco = z_human$permco[sample_]
x_red = x[sample(1:nrow(x),1000),]#[x$rssd %in% sampled_rssd,]
y_red = y[sample(1:nrow(y),1000),]#[y$permco %in% sampled_permco,]
#x_red = x; y_red = y
#why?
f2n(z_human$rssd)[f2n(z_human$rssd) %in% f2n(x$rssd)]
f2n(z_human$rssd)[!f2n(z_human$rssd) %in% f2n(x$rssd)]
system.time( z_red_exact <- merge(x=x_red, y=y_red,
by.x = "NM_LGL",by.y="comnam") )
x_red1  = x_red; y_red1  = y_red;
x_red1$alias_name = x_red1$NM_LGL
y_red1$alias_name = y_red1$comnam
system.time(z_red_fuzzy <- FastFuzzyMatch_public(x=x_red1, y=y_red1, by.x = "alias_name", by.y = "alias_name",
method = "jw", max_dist = 0.20) )
system.time(z_red_fuzzy_alt <- as.data.frame( stringdist_join(x = x_red1,y = y_red1, by="alias_name", mode = "inner",
ignore_case = FALSE, method = "jw",
max_dist = 0.20, distance_col = "dist")) )
head(z_red_fuzzy[z_red_fuzzy$alias_name.x==z_red_fuzzy$alias_name.x[2],])
head(z_red_fuzzy_alt[tolower(z_red_fuzzy_alt$alias_name.x)==z_red_fuzzy$alias_name.x[2],])
head(z_red_fuzzy_alt)
dim(z_red_fuzzy_alt)
dim(z_red_fuzzy)
z_red_fuzzy = z_red_fuzzy[,!grepl(colnames(z_red_fuzzy),pattern = "alias_name")]
#LinkIt(x=c(), y=c(),by.x = "NM_LGL",by.y="comnam",parallelize = T)
system.time(z_red_LinkIt <- LinkIt(x=x_red, y=y_red,
by.x = "NM_LGL",by.y="comnam",parallelize = T))
LT_d <- directory[,.(alias_name,alias_id,canonical_id)]
temp1 <- tempfile()
download.file("https://github.com/cjerzak/LinkIt-software/raw/master/directory_data.zip",temp1)
temp = unzip(temp1)
load(temp[1])
load(temp[3])
try(file.remove(temp),T)
directory = as.data.table(directory)
directory_trigrams = as.data.table(directory_trigrams)
LT_d <- directory[,.(alias_name,alias_id,canonical_id)]
#LinkIt(x=c(), y=c(),by.x = "NM_LGL",by.y="comnam",parallelize = T)
system.time(z_red_LinkIt <- LinkIt(x=x_red, y=y_red,
by.x = "NM_LGL",by.y="comnam",parallelize = T))
temp1 <- tempfile()
download.file("https://github.com/cjerzak/LinkIt-software/raw/master/directory_data.zip",temp1)
temp = unzip(temp1)
load(temp[1]);load(temp[3])
try(file.remove(temp),T)
directory = as.data.table(directory)
directory_trigrams = as.data.table(directory_trigrams)
LT_d <- directory[,.(alias_name,alias_id,canonical_id)]
LT_d <- directory[,.(alias_name,alias_id,canonical_id)]
q()
rm(list=ls())
library(fuzzyjoin);library(tidyverse)
factor2numeric <- function(x){as.numeric(as.character(x))}
library(data.table); library(sqldf);library(stringdist)
#setwd("~/Dropbox/Directory")
devtools::install_github("cjerzak/LinkIt-software/LinkIt");
library(LinkIt)
#load in data
load("./STARTUP_POINT.Rdata")
#let's sample the ones which definitely have matches
sample_ = sample(1:nrow(z_human),nrow(z_human))
sampled_rssd = z_human$rssd[sample_]
sampled_permco = z_human$permco[sample_]
x_red = x[sample(1:nrow(x),1000),]#[x$rssd %in% sampled_rssd,]
y_red = y[sample(1:nrow(y),1000),]#[y$permco %in% sampled_permco,]
#LinkIt(x=c(), y=c(),by.x = "NM_LGL",by.y="comnam",parallelize = T)
system.time(z_red_LinkIt <- LinkIt(x=x_red, y=y_red,
by.x = "NM_LGL",by.y="comnam",parallelize = T))
directory = as.data.table(directory)
directory_trigrams = as.data.table(directory_trigrams)
LT_d <- directory[,.(alias_name,alias_id,canonical_id)]
directory
temp1 <- tempfile()
download.file("https://github.com/cjerzak/LinkIt-software/raw/master/directory_data.zip",temp1)
temp = unzip(temp1)
load(temp[1]);load(temp[3])
try(file.remove(temp),T)
directory = as.data.table(directory)
directory_trigrams = as.data.table(directory_trigrams)
LT_d <- directory[,.(alias_name,alias_id,canonical_id)]
directory
temp1 <- tempfile()
download.file("https://github.com/cjerzak/LinkIt-software/raw/master/directory_data.zip",temp1)
temp = unzip(temp1)
load(temp[1]);load(temp[3])
try(file.remove(temp),T)
LT_d <- directory[,.(alias_name,alias_id,canonical_id)]
directory = as.data.table(directory)
directory_trigrams = as.data.table(directory_trigrams)
LT_d <- directory[,.(alias_name,alias_id,canonical_id)]
directory
head(directory)
.(alias_name,alias_id,canonical_id)
directory = as.data.table(directory)
directory_trigrams = as.data.table(directory_trigrams)
LT_d <- directory[,.(alias_name,alias_id,canonical_id)]
directory
class(directory)
LT_d <- directory[,.(alias_name,alias_id,canonical_id)]
library(data.table)
LT_d <- directory[,.(alias_name,alias_id,canonical_id)]
LT_d <- directory[,c("alias_name","alias_id","canonical_id")]
x.stop.words = x.words[,.(word.freq=.N/nrow(x)),word][
word.freq > control$x.stopwordcutoff,word
]
LT_d
q()
rm(list=ls())
#library(fuzzyjoin);
library(tidyverse)
factor2numeric <- function(x){as.numeric(as.character(x))}
library(data.table); library(sqldf);library(stringdist)
devtools::install_github("cjerzak/LinkIt-software/LinkIt");
library(LinkIt)
setwd("~/Dropbox/Directory")
options(stringsAsFactors = F)
m = fread("markov_clustered_orgs_interpretable_full_201904182237.csv")
setkey(m,alias_id)
set(m,which(is.na(m$alias_name)),"alias_name",'')
m[,alias_name:=trimws(alias_name)]
sup = m[,max(nchar(alias_name))]
m[,alias_length := nchar(alias_name)]
m[,alias_length := nchar(alias_name)]
load("./STARTUP_POINT.Rdata")
#let's sample the ones which definitely have matches
sample_ = sample(1:nrow(z_human),nrow(z_human))
sampled_rssd = z_human$rssd[sample_]
sampled_permco = z_human$permco[sample_]
x_red = x[sample(1:nrow(x),1000),]#[x$rssd %in% sampled_rssd,]
y_red = y[sample(1:nrow(y),1000),]#[y$permco %in% sampled_permco,]
#x_red = x; y_red = y
#why?
f2n(z_human$rssd)[f2n(z_human$rssd) %in% f2n(x$rssd)]
f2n(z_human$rssd)[!f2n(z_human$rssd) %in% f2n(x$rssd)]
z_red_fuzzy = z_red_fuzzy[,!grepl(colnames(z_red_fuzzy),pattern = "alias_name")]
#LinkIt(x=c(), y=c(),by.x = "NM_LGL",by.y="comnam",parallelize = T)
system.time(z_red_LinkIt <- LinkIt(x=x_red, y=y_red,
by.x = "NM_LGL",by.y="comnam",parallelize = T,browser= T))
LT_d <- directory[,.(alias_name,alias_id,canonical_id)]
directory = as.data.table(directory)
directory_trigrams = as.data.table(directory_trigrams)
LT_d <- directory[,.(alias_name,alias_id,canonical_id)]
rm(list=ls())
#library(fuzzyjoin);
library(tidyverse)
factor2numeric <- function(x){as.numeric(as.character(x))}
library(data.table); library(sqldf);library(stringdist)
devtools::install_github("cjerzak/LinkIt-software/LinkIt");
library(LinkIt)
setwd("~/Dropbox/Directory")
if(T == T){
options(stringsAsFactors = F)
m = fread("markov_clustered_orgs_interpretable_full_201904182237.csv")
setkey(m,alias_id)
set(m,which(is.na(m$alias_name)),"alias_name",'')
m[,alias_name:=trimws(alias_name)]
sup = m[,max(nchar(alias_name))]
m[,alias_length := nchar(alias_name)]
t = m[data.table(start_pos=1:100),
.(alias_id,alias_name,start_pos,alias_length=nchar(alias_name)),
on="alias_length>=start_pos",
nomatch=0,allow.cartesian=T][
order(alias_id)
]
t[,end_pos := pmin(start_pos+2,alias_length)]
directory_trigrams= t[start_pos==1 | start_pos+2 == end_pos,
.(
trigram=substr(alias_name,start_pos,end_pos),
alias_id)]
setkey(directory_trigrams,trigram)
library(xml2)
#result = read_xml("Data/Banking Research/20171231_ATTRIBUTES_ACTIVE/20171231_ATTRIBUTES_ACTIVE.XML")
result = read_xml("Data/Banking Research/old/20171231_ATTRIBUTES_ACTIVE/20171231_ATTRIBUTES_ACTIVE.XML")
children = xml_children(result)
first_child = children[[1000]]
xml_children(first_child)
rssd = xml_find_all(result,"//ATTRIBUTES//ID_RSSD")
NM_LGL = xml_find_all(result,"//ATTRIBUTES//NM_LGL")
NM_SHORT = xml_find_all(result,"//ATTRIBUTES//NM_SHORT")
x = data.table(
rssd=trimws(xml_text(rssd)),
NM_LGL=trimws(xml_text(NM_LGL)),
NM_SHORT=trimws(xml_text(NM_SHORT))
)
compustat = fread("Data/Banking Research/old/compustat_data.csv")
w = compustat[,.I[.N],by=permco]
y = compustat[w$V1,.(permco,comnam)]
bank_research <- new.env()
assign("x",x,envir=bank_research)
assign("y",y,envir=bank_research)
assign('directory_trigrams',directory_trigrams,envir=bank_research)
assign('directory',m[,.(alias_id,alias_name,canonical_id,canonical_name)],envir=bank_research)
save(file="LinkIt-software/data/bank_research.data",list=ls(envir=bank_research),envir=bank_research)
ikiisup=max(nchar(m$alias_name),nairm=T)
total = data.frame(i=1:sup)
x2 = sqldf("select alias_id,
alias_name,
case when i is null then 1
else i
end as start_pos from m
left join total
on i<length(alias_name)-1")
ptm=proc.time()
trigrams = sqldf("with example as (select alias_id,
alias_name,
case when i is null then 1
else i
end as start_pos from m
left join total
on i<length(alias_name)-1)
select
substr(alias_name,start_pos,3) as trigram,
alias_id from example
order by trigram") %>%
as_tibble()
ptm2 = proc.time()
ptm2-ptm
if(T == F){
set.seed(1)
examples = sample(m$alias_name,100)
examples
total_matches = NULL
for (example in examples){
starter = data.frame(example,start_pos=1:(nchar(example)-2))
yo = sqldf(
"
with eg_trigram as (
select
substr(example,start_pos,3) as trigram
from
starter)
select * from eg_trigram as A
left join trigrams as B
on A.trigram=B.trigram
"
)
trigrams[]
total_matches=c(total_matches,length(unique(yo$alias_id)))
}
}
t2 = data.table(trigrams)
setkey(t2,"trigram")
trigramify <- function(x){
if (nchar(x)<3){
return(x)
} else {
dtable = data.frame(start_pos=seq(1,nchar(x)-2,1))
return(apply(dtable,1,function(start_pos) substr(x,start_pos,start_pos+2)))
}
}
if(T == F){
t3 = m[,list(trigram=trigramify(alias_name)),alias_id]
setkey(t3,trigram)
set.seed(1)
examples = sample(m$alias_name,100)
ptm=proc.time()
counts = NULL
time.full = NULL
time.small = NULL
for (example in examples){
responses = unique(t3[trigramify(example),alias_id],by='alias_id')
counts = c(counts,length(responses))
#check the full time
process_start = proc.time()
dists = stringdist(example,m$alias_name,method='lv')
infimum =min(dists,na.rm=T)
match = m[which(dists==infimum),"alias_id"]
#record
time.full = c(time.full,(proc.time()-process_start)['elapsed'])
#check the short time
process_start = proc.time()
responses = unique(t3[trigramify(example),alias_id])
match = m[alias_id %in% responses,
list(alias_id,lv=stringdist(example,alias_name,method='lv'))
][order(lv)[1],alias_id]
time.small = c(time.small,(proc.time()-process_start)['elapsed'])
}
ggplot(data.frame(small=time.small,full=time.full),
aes(x=small,y=full)) +
geom_point() +
geom_abline(slope=1,intercept=0)
qplot(time.full/time.small)  +
scale_x_log10()
ptm2 = proc.time()
ptm2-ptm
library(ggplot2)
qplot(x=counts/nrow(m),geom = 'density')
stringdist(example,m$alias_name)
}
head(x);
head(y)
f2n = factor2numeric
z_human     = read.csv("./Data/Banking Research/old/human_merged.csv")[-c(1:2),]
colnames(z_human)[colnames(z_human) == "entity"] <- "rssd"
mean(!z_human$rssd %in% x$rssd)
mean(!z_human$permco %in% y$permco)
z_human = z_human[unique(which(z_human$rssd %in% x$rssd &
z_human$permco %in% y$permco)),]
dim(z_human)
save.image(file = "./STARTUP_POINT.Rdata")
}
save
head(save)
save(file = "./STARTUP_POINT.Rdata",list=c("x", "y","z_human"))
rm(list=ls())
load("./STARTUP_POINT.Rdata")
#let's sample the ones which definitely have matches
sample_ = sample(1:nrow(z_human),nrow(z_human))
sampled_rssd = z_human$rssd[sample_]
sampled_permco = z_human$permco[sample_]
x_red = x[sample(1:nrow(x),1000),]#[x$rssd %in% sampled_rssd,]
y_red = y[sample(1:nrow(y),1000),]#[y$permco %in% sampled_permco,]
#why?
f2n(z_human$rssd)[f2n(z_human$rssd) %in% f2n(x$rssd)]
f2n<-function(x){ as.numeric(as.character(x))}
#why?
f2n(z_human$rssd)[f2n(z_human$rssd) %in% f2n(x$rssd)]
f2n(z_human$rssd)[!f2n(z_human$rssd) %in% f2n(x$rssd)]
system.time( z_red_exact <- merge(x=x_red, y=y_red,
by.x = "NM_LGL",by.y="comnam") )
x_red1  = x_red; y_red1  = y_red;
x_red1$alias_name = x_red1$NM_LGL
y_red1$alias_name = y_red1$comnam
system.time(z_red_fuzzy <- FastFuzzyMatch_public(x=x_red1, y=y_red1, by.x = "alias_name", by.y = "alias_name",
method = "jw", max_dist = 0.20) )
FastFuzzyMatch_public
devtools::install_github("cjerzak/LinkIt-software/LinkIt");
library(LinkIt)
FastFuzzyMatch_public
FastFuzzyMatch_public <- function(x,y,by.x, by.y, parallelize = T,
method = "jw", max_dist = 0.20){
#WARNING: X SHOULD ALWAYS BE THE LARGER SET
if(nrow(x) < nrow(y)){stop("X SHOULD ALWAYS BE THE LARGER SET")}
if(by.x == by.y){
colnames(x)[colnames(x) == by.x] <- paste(by.x, ".x", sep = "")
colnames(y)[colnames(y) == by.y] <- paste(by.y, ".y", sep = "")
by.x = paste(by.x, ".x", sep = "");by.y = paste(by.y, ".y", sep = "")
}
x[[by.x]] <- tolower(x[[by.x]] )
y[[by.y]] <- tolower(y[[by.y]] )
x_index = trigram_index(x[[by.x]],"the.row")
y_index = trigram_index(y[[by.y]],'the.row')
n_iters = max(nrow(x), nrow(y))
my_matched = matrix(NA,nrow = n_iters,ncol=4)
if(parallelize == T){
require("foreach",quietly=T); require("doMC",quietly=T)
ncl = detectCores()
split_list = round(seq(0.5,n_iters,length.out = ncl+1))
split_list = as.numeric(cut(1:n_iters,breaks=split_list))
split_list = sapply(1:ncl, function(as){ list(which(split_list ==as))})
if(length(unlist(split_list)) != n_iters){browser()}
cl<-registerDoMC(ncl);
loop_ <- foreach(outer_i = 1:ncl) %dopar% {
counter_ <- 0
my_matched_inner = matrix(NA,nrow = length(split_list[[outer_i]]),ncol=3)
for(i in split_list[[outer_i]]){
counter_ = counter_ + 1
#get the name we want to fuzzy match against the directory
my_entry = x[i][[by.x]]
#get the trigrams of this name
my_entry_trigrams = x_index[the.row==i,trigram]
#find the set of entries in LT_d that have some common trigram
LT_entries = unique(x_index[trigram %in% my_entry_trigrams,the.row])
#calculate the nearest match according to string distance
match_ = eval(parse(text=sprintf("unlist(y[LT_entries,.(
my_entry = my_entry,
%s,
stringdist = stringdist(my_entry,%s,method=method))][
order(stringdist)[1]
])", by.y, by.y)))
my_matched_inner[counter_,] <- match_
}
colnames(my_matched_inner) <- names(match)
return( my_matched_inner )
}
my_matched = do.call(rbind,loop_)
}
colnames(my_matched) <- c("MATCH_X", "MATCH_Y", "stringdist")
x = cbind(x,my_matched)
z = cbind(x, y[match(x[["MATCH_Y"]],y[[by.y]])])
z = z[as.numeric(as.character(z$stringdist))<max_dist,]
z = as.data.frame(z)[,!colnames(z) %in% colnames(my_matched)]
return( z )
}
system.time(z_red_fuzzy <- FastFuzzyMatch_public(x=x_red1, y=y_red1, by.x = "alias_name", by.y = "alias_name",
method = "jw", max_dist = 0.20) )
package_name <- "LinkIt"
#Generate documentation
{
setwd(sprintf("~/Dropbox/Directory/%s-software",package_name))
devtools::document(sprintf("./%s",package_name))
try(file.remove(sprintf("./%s.pdf",package_name)),T); system(sprintf("R CMD Rd2pdf %s",package_name))
}
q()
